//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(HAWB))]
    [KnownType(typeof(MAWB))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Package: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid PID
        {
            get { return _pID; }
            set
            {
                if (_pID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pID = value;
                    OnPropertyChanged("PID");
                }
            }
        }
        private System.Guid _pID;
    
        [DataMember]
        public Nullable<System.Guid> MID
        {
            get { return _mID; }
            set
            {
                if (_mID != value)
                {
                    ChangeTracker.RecordOriginalValue("MID", _mID);
                    if (!IsDeserializing)
                    {
                        if (MAWB != null && MAWB.MID != value)
                        {
                            MAWB = null;
                        }
                    }
                    _mID = value;
                    OnPropertyChanged("MID");
                }
            }
        }
        private Nullable<System.Guid> _mID;
    
        [DataMember]
        public string BarCode
        {
            get { return _barCode; }
            set
            {
                if (_barCode != value)
                {
                    _barCode = value;
                    OnPropertyChanged("BarCode");
                }
            }
        }
        private string _barCode;
    
        [DataMember]
        public string RegionCode
        {
            get { return _regionCode; }
            set
            {
                if (_regionCode != value)
                {
                    _regionCode = value;
                    OnPropertyChanged("RegionCode");
                }
            }
        }
        private string _regionCode;
    
        [DataMember]
        public int Piece
        {
            get { return _piece; }
            set
            {
                if (_piece != value)
                {
                    _piece = value;
                    OnPropertyChanged("Piece");
                }
            }
        }
        private int _piece;
    
        [DataMember]
        public decimal TotalWeight
        {
            get { return _totalWeight; }
            set
            {
                if (_totalWeight != value)
                {
                    _totalWeight = value;
                    OnPropertyChanged("TotalWeight");
                }
            }
        }
        private decimal _totalWeight;
    
        [DataMember]
        public System.DateTime CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private System.DateTime _createTime;
    
        [DataMember]
        public System.DateTime UpdateTime
        {
            get { return _updateTime; }
            set
            {
                if (_updateTime != value)
                {
                    _updateTime = value;
                    OnPropertyChanged("UpdateTime");
                }
            }
        }
        private System.DateTime _updateTime;
    
        [DataMember]
        public string Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    OnPropertyChanged("Operator");
                }
            }
        }
        private string _operator;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;
    
        [DataMember]
        public bool IsMixed
        {
            get { return _isMixed; }
            set
            {
                if (_isMixed != value)
                {
                    _isMixed = value;
                    OnPropertyChanged("IsMixed");
                }
            }
        }
        private bool _isMixed;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<HAWB> HAWB
        {
            get
            {
                if (_hAWB == null)
                {
                    _hAWB = new TrackableCollection<HAWB>();
                    _hAWB.CollectionChanged += FixupHAWB;
                }
                return _hAWB;
            }
            set
            {
                if (!ReferenceEquals(_hAWB, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hAWB != null)
                    {
                        _hAWB.CollectionChanged -= FixupHAWB;
                    }
                    _hAWB = value;
                    if (_hAWB != null)
                    {
                        _hAWB.CollectionChanged += FixupHAWB;
                    }
                    OnNavigationPropertyChanged("HAWB");
                }
            }
        }
        private TrackableCollection<HAWB> _hAWB;
    
        [DataMember]
        public MAWB MAWB
        {
            get { return _mAWB; }
            set
            {
                if (!ReferenceEquals(_mAWB, value))
                {
                    var previousValue = _mAWB;
                    _mAWB = value;
                    FixupMAWB(previousValue);
                    OnNavigationPropertyChanged("MAWB");
                }
            }
        }
        private MAWB _mAWB;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            HAWB.Clear();
            MAWB = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMAWB(MAWB previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Package.Contains(this))
            {
                previousValue.Package.Remove(this);
            }
    
            if (MAWB != null)
            {
                if (!MAWB.Package.Contains(this))
                {
                    MAWB.Package.Add(this);
                }
    
                MID = MAWB.MID;
            }
            else if (!skipKeys)
            {
                MID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MAWB")
                    && (ChangeTracker.OriginalValues["MAWB"] == MAWB))
                {
                    ChangeTracker.OriginalValues.Remove("MAWB");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MAWB", previousValue);
                }
                if (MAWB != null && !MAWB.ChangeTracker.ChangeTrackingEnabled)
                {
                    MAWB.StartTracking();
                }
            }
        }
    
        private void FixupHAWB(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HAWB item in e.NewItems)
                {
                    item.Package = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HAWB", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HAWB item in e.OldItems)
                {
                    if (ReferenceEquals(item.Package, this))
                    {
                        item.Package = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HAWB", item);
                    }
                }
            }
        }

        #endregion
    }
}
