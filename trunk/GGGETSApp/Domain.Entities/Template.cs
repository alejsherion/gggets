//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Data.Objects.DataClasses;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Param))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Template: EntityObject,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=true,IsNullable=false)]
    			
        public System.Guid TID
        {
            get { return _tID; }
            set
            {
                if (_tID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tID = value;
                    OnPropertyChanged("TID");
                }
            }
        }
        private System.Guid _tID;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string Desc
        {
            get { return _desc; }
            set
            {
                if (_desc != value)
                {
                    _desc = value;
                    OnPropertyChanged("Desc");
                }
            }
        }
        private string _desc;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string PaperType
        {
            get { return _paperType; }
            set
            {
                if (_paperType != value)
                {
                    _paperType = value;
                    OnPropertyChanged("PaperType");
                }
            }
        }
        private string _paperType;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private System.DateTime _createDate;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public System.DateTime ModifyDate
        {
            get { return _modifyDate; }
            set
            {
                if (_modifyDate != value)
                {
                    _modifyDate = value;
                    OnPropertyChanged("ModifyDate");
                }
            }
        }
        private System.DateTime _modifyDate;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    OnPropertyChanged("Operator");
                }
            }
        }
        private string _operator;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string TemplateCode
        {
            get { return _templateCode; }
            set
            {
                if (_templateCode != value)
                {
                    _templateCode = value;
                    OnPropertyChanged("TemplateCode");
                }
            }
        }
        private string _templateCode;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public Nullable<int> PrintDirection
        {
            get { return _printDirection; }
            set
            {
                if (_printDirection != value)
                {
                    _printDirection = value;
                    OnPropertyChanged("PrintDirection");
                }
            }
        }
        private Nullable<int> _printDirection;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public Nullable<int> PagerWidth
        {
            get { return _pagerWidth; }
            set
            {
                if (_pagerWidth != value)
                {
                    _pagerWidth = value;
                    OnPropertyChanged("PagerWidth");
                }
            }
        }
        private Nullable<int> _pagerWidth;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public Nullable<int> PagerHeight
        {
            get { return _pagerHeight; }
            set
            {
                if (_pagerHeight != value)
                {
                    _pagerHeight = value;
                    OnPropertyChanged("PagerHeight");
                }
            }
        }
        private Nullable<int> _pagerHeight;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public Nullable<int> BatchHeight
        {
            get { return _batchHeight; }
            set
            {
                if (_batchHeight != value)
                {
                    _batchHeight = value;
                    OnPropertyChanged("BatchHeight");
                }
            }
        }
        private Nullable<int> _batchHeight;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string CorrespondingTable
        {
            get { return _correspondingTable; }
            set
            {
                if (_correspondingTable != value)
                {
                    _correspondingTable = value;
                    OnPropertyChanged("CorrespondingTable");
                }
            }
        }
        private string _correspondingTable;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string CorrespondingCN
        {
            get { return _correspondingCN; }
            set
            {
                if (_correspondingCN != value)
                {
                    _correspondingCN = value;
                    OnPropertyChanged("CorrespondingCN");
                }
            }
        }
        private string _correspondingCN;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string IdentifyKey
        {
            get { return _identifyKey; }
            set
            {
                if (_identifyKey != value)
                {
                    _identifyKey = value;
                    OnPropertyChanged("IdentifyKey");
                }
            }
        }
        private string _identifyKey;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Param> Params
        {
            get
            {
                if (_params == null)
                {
                    _params = new TrackableCollection<Param>();
                    _params.CollectionChanged += FixupParams;
                }
                return _params;
            }
            set
            {
                if (!ReferenceEquals(_params, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_params != null)
                    {
                        _params.CollectionChanged -= FixupParams;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Param item in _params)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _params = value;
                    if (_params != null)
                    {
                        _params.CollectionChanged += FixupParams;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Param item in _params)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Params");
                }
            }
        }
        private TrackableCollection<Param> _params;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Params.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupParams(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Param item in e.NewItems)
                {
                    item.Template = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Params", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Param item in e.OldItems)
                {
                    if (ReferenceEquals(item.Template, this))
                    {
                        item.Template = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Params", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
