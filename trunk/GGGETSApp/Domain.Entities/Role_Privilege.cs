//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AppModule))]
    [KnownType(typeof(Role))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Role_Privilege: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid Role_PrivilegeID
        {
            get { return _role_PrivilegeID; }
            set
            {
                if (_role_PrivilegeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Role_PrivilegeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _role_PrivilegeID = value;
                    OnPropertyChanged("Role_PrivilegeID");
                }
            }
        }
        private System.Guid _role_PrivilegeID;
    
        [DataMember]
        public Nullable<System.Guid> ModuleID
        {
            get { return _moduleID; }
            set
            {
                if (_moduleID != value)
                {
                    ChangeTracker.RecordOriginalValue("ModuleID", _moduleID);
                    if (!IsDeserializing)
                    {
                        if (AppModule != null && AppModule.ModuleID != value)
                        {
                            AppModule = null;
                        }
                    }
                    _moduleID = value;
                    OnPropertyChanged("ModuleID");
                }
            }
        }
        private Nullable<System.Guid> _moduleID;
    
        [DataMember]
        public int PrivilegeDesc
        {
            get { return _privilegeDesc; }
            set
            {
                if (_privilegeDesc != value)
                {
                    _privilegeDesc = value;
                    OnPropertyChanged("PrivilegeDesc");
                }
            }
        }
        private int _privilegeDesc;
    
        [DataMember]
        public System.DateTime CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private System.DateTime _createTime;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public Nullable<System.Guid> RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    ChangeTracker.RecordOriginalValue("RoleID", _roleID);
                    if (!IsDeserializing)
                    {
                        if (Role != null && Role.RoleID != value)
                        {
                            Role = null;
                        }
                    }
                    _roleID = value;
                    OnPropertyChanged("RoleID");
                }
            }
        }
        private Nullable<System.Guid> _roleID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public AppModule AppModule
        {
            get { return _appModule; }
            set
            {
                if (!ReferenceEquals(_appModule, value))
                {
                    var previousValue = _appModule;
                    _appModule = value;
                    FixupAppModule(previousValue);
                    OnNavigationPropertyChanged("AppModule");
                }
            }
        }
        private AppModule _appModule;
    
        [DataMember]
        public Role Role
        {
            get { return _role; }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role;
                    _role = value;
                    FixupRole(previousValue);
                    OnNavigationPropertyChanged("Role");
                }
            }
        }
        private Role _role;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AppModule = null;
            Role = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupAppModule(AppModule previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Role_Privilege.Contains(this))
            {
                previousValue.Role_Privilege.Remove(this);
            }
    
            if (AppModule != null)
            {
                if (!AppModule.Role_Privilege.Contains(this))
                {
                    AppModule.Role_Privilege.Add(this);
                }
    
                ModuleID = AppModule.ModuleID;
            }
            else if (!skipKeys)
            {
                ModuleID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AppModule")
                    && (ChangeTracker.OriginalValues["AppModule"] == AppModule))
                {
                    ChangeTracker.OriginalValues.Remove("AppModule");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AppModule", previousValue);
                }
                if (AppModule != null && !AppModule.ChangeTracker.ChangeTrackingEnabled)
                {
                    AppModule.StartTracking();
                }
            }
        }
    
        private void FixupRole(Role previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Role_Privilege.Contains(this))
            {
                previousValue.Role_Privilege.Remove(this);
            }
    
            if (Role != null)
            {
                if (!Role.Role_Privilege.Contains(this))
                {
                    Role.Role_Privilege.Add(this);
                }
    
                RoleID = Role.RoleID;
            }
            else if (!skipKeys)
            {
                RoleID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Role")
                    && (ChangeTracker.OriginalValues["Role"] == Role))
                {
                    ChangeTracker.OriginalValues.Remove("Role");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Role", previousValue);
                }
                if (Role != null && !Role.ChangeTracker.ChangeTrackingEnabled)
                {
                    Role.StartTracking();
                }
            }
        }

        #endregion
    }
}
