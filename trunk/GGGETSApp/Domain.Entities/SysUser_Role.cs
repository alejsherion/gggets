//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Role))]
    [KnownType(typeof(SysUser))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SysUser_Role: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid SysUser_RoleID
        {
            get { return _sysUser_RoleID; }
            set
            {
                if (_sysUser_RoleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SysUser_RoleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sysUser_RoleID = value;
                    OnPropertyChanged("SysUser_RoleID");
                }
            }
        }
        private System.Guid _sysUser_RoleID;
    
        [DataMember]
        public Nullable<System.Guid> RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    ChangeTracker.RecordOriginalValue("RoleID", _roleID);
                    if (!IsDeserializing)
                    {
                        if (Role != null && Role.RoleID != value)
                        {
                            Role = null;
                        }
                    }
                    _roleID = value;
                    OnPropertyChanged("RoleID");
                }
            }
        }
        private Nullable<System.Guid> _roleID;
    
        [DataMember]
        public Nullable<System.Guid> UID
        {
            get { return _uID; }
            set
            {
                if (_uID != value)
                {
                    ChangeTracker.RecordOriginalValue("UID", _uID);
                    if (!IsDeserializing)
                    {
                        if (SysUser != null && SysUser.UID != value)
                        {
                            SysUser = null;
                        }
                    }
                    _uID = value;
                    OnPropertyChanged("UID");
                }
            }
        }
        private Nullable<System.Guid> _uID;
    
        [DataMember]
        public Nullable<System.DateTime> LastUpdateTime
        {
            get { return _lastUpdateTime; }
            set
            {
                if (_lastUpdateTime != value)
                {
                    _lastUpdateTime = value;
                    OnPropertyChanged("LastUpdateTime");
                }
            }
        }
        private Nullable<System.DateTime> _lastUpdateTime;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Role Role
        {
            get { return _role; }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role;
                    _role = value;
                    FixupRole(previousValue);
                    OnNavigationPropertyChanged("Role");
                }
            }
        }
        private Role _role;
    
        [DataMember]
        public SysUser SysUser
        {
            get { return _sysUser; }
            set
            {
                if (!ReferenceEquals(_sysUser, value))
                {
                    var previousValue = _sysUser;
                    _sysUser = value;
                    FixupSysUser(previousValue);
                    OnNavigationPropertyChanged("SysUser");
                }
            }
        }
        private SysUser _sysUser;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Role = null;
            SysUser = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupRole(Role previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SysUser_Role.Contains(this))
            {
                previousValue.SysUser_Role.Remove(this);
            }
    
            if (Role != null)
            {
                if (!Role.SysUser_Role.Contains(this))
                {
                    Role.SysUser_Role.Add(this);
                }
    
                RoleID = Role.RoleID;
            }
            else if (!skipKeys)
            {
                RoleID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Role")
                    && (ChangeTracker.OriginalValues["Role"] == Role))
                {
                    ChangeTracker.OriginalValues.Remove("Role");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Role", previousValue);
                }
                if (Role != null && !Role.ChangeTracker.ChangeTrackingEnabled)
                {
                    Role.StartTracking();
                }
            }
        }
    
        private void FixupSysUser(SysUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SysUser_Role.Contains(this))
            {
                previousValue.SysUser_Role.Remove(this);
            }
    
            if (SysUser != null)
            {
                if (!SysUser.SysUser_Role.Contains(this))
                {
                    SysUser.SysUser_Role.Add(this);
                }
    
                UID = SysUser.UID;
            }
            else if (!skipKeys)
            {
                UID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SysUser")
                    && (ChangeTracker.OriginalValues["SysUser"] == SysUser))
                {
                    ChangeTracker.OriginalValues.Remove("SysUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SysUser", previousValue);
                }
                if (SysUser != null && !SysUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    SysUser.StartTracking();
                }
            }
        }

        #endregion
    }
}
