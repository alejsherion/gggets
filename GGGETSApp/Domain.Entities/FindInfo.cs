//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Data.Objects.DataClasses;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class FindInfo: EntityObject,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=true,IsNullable=true)]	
        public string fieldname
        {
            get { return _fieldname; }
            set
            {
                if (_fieldname != value)
                {
                    _fieldname = value;
                    OnPropertyChanged("fieldname");
                }
            }
        }
        private string _fieldname;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public Nullable<int> identity
        {
            get { return _identity; }
            set
            {
                if (_identity != value)
                {
                    _identity = value;
                    OnPropertyChanged("identity");
                }
            }
        }
        private Nullable<int> _identity;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string primarykey
        {
            get { return _primarykey; }
            set
            {
                if (_primarykey != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'primarykey' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _primarykey = value;
                    OnPropertyChanged("primarykey");
                }
            }
        }
        private string _primarykey;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("type");
                }
            }
        }
        private string _type;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public Nullable<int> length
        {
            get { return _length; }
            set
            {
                if (_length != value)
                {
                    _length = value;
                    OnPropertyChanged("length");
                }
            }
        }
        private Nullable<int> _length;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public int @decimal
        {
            get { return _decimal; }
            set
            {
                if (_decimal != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'decimal' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _decimal = value;
                    OnPropertyChanged("decimal");
                }
            }
        }
        private int _decimal;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string isnull
        {
            get { return _isnull; }
            set
            {
                if (_isnull != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'isnull' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isnull = value;
                    OnPropertyChanged("isnull");
                }
            }
        }
        private string _isnull;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'name' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string fielddesc
        {
            get { return _fielddesc; }
            set
            {
                if (_fielddesc != value)
                {
                    _fielddesc = value;
                    OnPropertyChanged("fielddesc");
                }
            }
        }
        private string _fielddesc;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
