//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Role_Privilege))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class AppModule: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid ModuleID
        {
            get { return _moduleID; }
            set
            {
                if (_moduleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ModuleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _moduleID = value;
                    OnPropertyChanged("ModuleID");
                }
            }
        }
        private System.Guid _moduleID;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private Nullable<System.DateTime> _createTime;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public bool IsLeft
        {
            get { return _isLeft; }
            set
            {
                if (_isLeft != value)
                {
                    _isLeft = value;
                    OnPropertyChanged("IsLeft");
                }
            }
        }
        private bool _isLeft;
    
        [DataMember]
        public Nullable<System.Guid> ParentId
        {
            get { return _parentId; }
            set
            {
                if (_parentId != value)
                {
                    _parentId = value;
                    OnPropertyChanged("ParentId");
                }
            }
        }
        private Nullable<System.Guid> _parentId;
    
        [DataMember]
        public Nullable<int> PrivilegeDesc
        {
            get { return _privilegeDesc; }
            set
            {
                if (_privilegeDesc != value)
                {
                    _privilegeDesc = value;
                    OnPropertyChanged("PrivilegeDesc");
                }
            }
        }
        private Nullable<int> _privilegeDesc;
    
        [DataMember]
        public string URL
        {
            get { return _uRL; }
            set
            {
                if (_uRL != value)
                {
                    _uRL = value;
                    OnPropertyChanged("URL");
                }
            }
        }
        private string _uRL;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Role_Privilege> Role_Privilege
        {
            get
            {
                if (_role_Privilege == null)
                {
                    _role_Privilege = new TrackableCollection<Role_Privilege>();
                    _role_Privilege.CollectionChanged += FixupRole_Privilege;
                }
                return _role_Privilege;
            }
            set
            {
                if (!ReferenceEquals(_role_Privilege, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_role_Privilege != null)
                    {
                        _role_Privilege.CollectionChanged -= FixupRole_Privilege;
                    }
                    _role_Privilege = value;
                    if (_role_Privilege != null)
                    {
                        _role_Privilege.CollectionChanged += FixupRole_Privilege;
                    }
                    OnNavigationPropertyChanged("Role_Privilege");
                }
            }
        }
        private TrackableCollection<Role_Privilege> _role_Privilege;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Role_Privilege.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupRole_Privilege(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Role_Privilege item in e.NewItems)
                {
                    item.AppModule = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Role_Privilege", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role_Privilege item in e.OldItems)
                {
                    if (ReferenceEquals(item.AppModule, this))
                    {
                        item.AppModule = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Role_Privilege", item);
                    }
                }
            }
        }

        #endregion
    }
}
