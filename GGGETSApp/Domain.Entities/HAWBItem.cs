//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(HAWB))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class HAWBItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid ItemID
        {
            get { return _itemID; }
            set
            {
                if (_itemID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItemID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _itemID = value;
                    OnPropertyChanged("ItemID");
                }
            }
        }
        private System.Guid _itemID;
    
        [DataMember]
        public Nullable<System.Guid> HID
        {
            get { return _hID; }
            set
            {
                if (_hID != value)
                {
                    ChangeTracker.RecordOriginalValue("HID", _hID);
                    if (!IsDeserializing)
                    {
                        if (HAWB != null && HAWB.HID != value)
                        {
                            HAWB = null;
                        }
                    }
                    _hID = value;
                    OnPropertyChanged("HID");
                }
            }
        }
        private Nullable<System.Guid> _hID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int Piece
        {
            get { return _piece; }
            set
            {
                if (_piece != value)
                {
                    _piece = value;
                    OnPropertyChanged("Piece");
                }
            }
        }
        private int _piece;
    
        [DataMember]
        public decimal UnitAmount
        {
            get { return _unitAmount; }
            set
            {
                if (_unitAmount != value)
                {
                    _unitAmount = value;
                    OnPropertyChanged("UnitAmount");
                }
            }
        }
        private decimal _unitAmount;
    
        [DataMember]
        public decimal TotalAmount
        {
            get { return _totalAmount; }
            set
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value;
                    OnPropertyChanged("TotalAmount");
                }
            }
        }
        private decimal _totalAmount;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public HAWB HAWB
        {
            get { return _hAWB; }
            set
            {
                if (!ReferenceEquals(_hAWB, value))
                {
                    var previousValue = _hAWB;
                    _hAWB = value;
                    FixupHAWB(previousValue);
                    OnNavigationPropertyChanged("HAWB");
                }
            }
        }
        private HAWB _hAWB;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            HAWB = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupHAWB(HAWB previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HAWBItem.Contains(this))
            {
                previousValue.HAWBItem.Remove(this);
            }
    
            if (HAWB != null)
            {
                if (!HAWB.HAWBItem.Contains(this))
                {
                    HAWB.HAWBItem.Add(this);
                }
    
                HID = HAWB.HID;
            }
            else if (!skipKeys)
            {
                HID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("HAWB")
                    && (ChangeTracker.OriginalValues["HAWB"] == HAWB))
                {
                    ChangeTracker.OriginalValues.Remove("HAWB");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("HAWB", previousValue);
                }
                if (HAWB != null && !HAWB.ChangeTracker.ChangeTrackingEnabled)
                {
                    HAWB.StartTracking();
                }
            }
        }

        #endregion
    }
}
