//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Data.Objects.DataClasses;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AddressBook))]
    [KnownType(typeof(Department))]
    [KnownType(typeof(HAWB))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class User: EntityObject,IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=true,IsNullable=false)]
    			
        public System.Guid UID
        {
            get { return _uID; }
            set
            {
                if (_uID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _uID = value;
                    OnPropertyChanged("UID");
                }
            }
        }
        private System.Guid _uID;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public Nullable<System.Guid> DID
        {
            get { return _dID; }
            set
            {
                if (_dID != value)
                {
                    ChangeTracker.RecordOriginalValue("DID", _dID);
                    if (!IsDeserializing)
                    {
                        if (Department != null && Department.DID != value)
                        {
                            Department = null;
                        }
                    }
                    _dID = value;
                    OnPropertyChanged("DID");
                }
            }
        }
        private Nullable<System.Guid> _dID;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string LoginName
        {
            get { return _loginName; }
            set
            {
                if (_loginName != value)
                {
                    _loginName = value;
                    OnPropertyChanged("LoginName");
                }
            }
        }
        private string _loginName;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string RealName
        {
            get { return _realName; }
            set
            {
                if (_realName != value)
                {
                    _realName = value;
                    OnPropertyChanged("RealName");
                }
            }
        }
        private string _realName;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public System.DateTime UpdateTime
        {
            get { return _updateTime; }
            set
            {
                if (_updateTime != value)
                {
                    _updateTime = value;
                    OnPropertyChanged("UpdateTime");
                }
            }
        }
        private System.DateTime _updateTime;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public System.DateTime CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private System.DateTime _createTime;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public string Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    OnPropertyChanged("Operator");
                }
            }
        }
        private string _operator;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=true)]	
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public int FeeDiscountType
        {
            get { return _feeDiscountType; }
            set
            {
                if (_feeDiscountType != value)
                {
                    _feeDiscountType = value;
                    OnPropertyChanged("FeeDiscountType");
                }
            }
        }
        private int _feeDiscountType;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public decimal FeeDiscountRate
        {
            get { return _feeDiscountRate; }
            set
            {
                if (_feeDiscountRate != value)
                {
                    _feeDiscountRate = value;
                    OnPropertyChanged("FeeDiscountRate");
                }
            }
        }
        private decimal _feeDiscountRate;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public int WeightDiscountType
        {
            get { return _weightDiscountType; }
            set
            {
                if (_weightDiscountType != value)
                {
                    _weightDiscountType = value;
                    OnPropertyChanged("WeightDiscountType");
                }
            }
        }
        private int _weightDiscountType;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public decimal WeightDiscountRate
        {
            get { return _weightDiscountRate; }
            set
            {
                if (_weightDiscountRate != value)
                {
                    _weightDiscountRate = value;
                    OnPropertyChanged("WeightDiscountRate");
                }
            }
        }
        private decimal _weightDiscountRate;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public int SettleType
        {
            get { return _settleType; }
            set
            {
                if (_settleType != value)
                {
                    _settleType = value;
                    OnPropertyChanged("SettleType");
                }
            }
        }
        private int _settleType;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public int WeightCalType
        {
            get { return _weightCalType; }
            set
            {
                if (_weightCalType != value)
                {
                    _weightCalType = value;
                    OnPropertyChanged("WeightCalType");
                }
            }
        }
        private int _weightCalType;
    
        [DataMember]
    			[EdmScalarProperty(EntityKeyProperty=false,IsNullable=false)]
    			
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<AddressBook> AddressBooks
        {
            get
            {
                if (_addressBooks == null)
                {
                    _addressBooks = new TrackableCollection<AddressBook>();
                    _addressBooks.CollectionChanged += FixupAddressBooks;
                }
                return _addressBooks;
            }
            set
            {
                if (!ReferenceEquals(_addressBooks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_addressBooks != null)
                    {
                        _addressBooks.CollectionChanged -= FixupAddressBooks;
                    }
                    _addressBooks = value;
                    if (_addressBooks != null)
                    {
                        _addressBooks.CollectionChanged += FixupAddressBooks;
                    }
                    OnNavigationPropertyChanged("AddressBooks");
                }
            }
        }
        private TrackableCollection<AddressBook> _addressBooks;
    
        [DataMember]
        public Department Department
        {
            get { return _department; }
            set
            {
                if (!ReferenceEquals(_department, value))
                {
                    var previousValue = _department;
                    _department = value;
                    FixupDepartment(previousValue);
                    OnNavigationPropertyChanged("Department");
                }
            }
        }
        private Department _department;
    
        [DataMember]
        public TrackableCollection<HAWB> HAWBs
        {
            get
            {
                if (_hAWBs == null)
                {
                    _hAWBs = new TrackableCollection<HAWB>();
                    _hAWBs.CollectionChanged += FixupHAWBs;
                }
                return _hAWBs;
            }
            set
            {
                if (!ReferenceEquals(_hAWBs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hAWBs != null)
                    {
                        _hAWBs.CollectionChanged -= FixupHAWBs;
                    }
                    _hAWBs = value;
                    if (_hAWBs != null)
                    {
                        _hAWBs.CollectionChanged += FixupHAWBs;
                    }
                    OnNavigationPropertyChanged("HAWBs");
                }
            }
        }
        private TrackableCollection<HAWB> _hAWBs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AddressBooks.Clear();
            Department = null;
            HAWBs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupDepartment(Department previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Department != null)
            {
                if (!Department.Users.Contains(this))
                {
                    Department.Users.Add(this);
                }
    
                DID = Department.DID;
            }
            else if (!skipKeys)
            {
                DID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Department")
                    && (ChangeTracker.OriginalValues["Department"] == Department))
                {
                    ChangeTracker.OriginalValues.Remove("Department");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Department", previousValue);
                }
                if (Department != null && !Department.ChangeTracker.ChangeTrackingEnabled)
                {
                    Department.StartTracking();
                }
            }
        }
    
        private void FixupAddressBooks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AddressBook item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AddressBooks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AddressBook item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AddressBooks", item);
                    }
                }
            }
        }
    
        private void FixupHAWBs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HAWB item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HAWBs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HAWB item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HAWBs", item);
                    }
                }
            }
        }

        #endregion
    }
}
