//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Role_Privilege))]
    [KnownType(typeof(SysUser))]
    [KnownType(typeof(SysUser_Role))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Role: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RoleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _roleID = value;
                    OnPropertyChanged("RoleID");
                }
            }
        }
        private System.Guid _roleID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private Nullable<System.DateTime> _createTime;
    
        [DataMember]
        public Nullable<System.DateTime> LastUpdateTime
        {
            get { return _lastUpdateTime; }
            set
            {
                if (_lastUpdateTime != value)
                {
                    _lastUpdateTime = value;
                    OnPropertyChanged("LastUpdateTime");
                }
            }
        }
        private Nullable<System.DateTime> _lastUpdateTime;
    
        [DataMember]
        public string UpdateId
        {
            get { return _updateId; }
            set
            {
                if (_updateId != value)
                {
                    _updateId = value;
                    OnPropertyChanged("UpdateId");
                }
            }
        }
        private string _updateId;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Role_Privilege> Role_Privilege
        {
            get
            {
                if (_role_Privilege == null)
                {
                    _role_Privilege = new TrackableCollection<Role_Privilege>();
                    _role_Privilege.CollectionChanged += FixupRole_Privilege;
                }
                return _role_Privilege;
            }
            set
            {
                if (!ReferenceEquals(_role_Privilege, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_role_Privilege != null)
                    {
                        _role_Privilege.CollectionChanged -= FixupRole_Privilege;
                    }
                    _role_Privilege = value;
                    if (_role_Privilege != null)
                    {
                        _role_Privilege.CollectionChanged += FixupRole_Privilege;
                    }
                    OnNavigationPropertyChanged("Role_Privilege");
                }
            }
        }
        private TrackableCollection<Role_Privilege> _role_Privilege;
    
        [DataMember]
        public TrackableCollection<SysUser> SysUser
        {
            get
            {
                if (_sysUser == null)
                {
                    _sysUser = new TrackableCollection<SysUser>();
                    _sysUser.CollectionChanged += FixupSysUser;
                }
                return _sysUser;
            }
            set
            {
                if (!ReferenceEquals(_sysUser, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sysUser != null)
                    {
                        _sysUser.CollectionChanged -= FixupSysUser;
                    }
                    _sysUser = value;
                    if (_sysUser != null)
                    {
                        _sysUser.CollectionChanged += FixupSysUser;
                    }
                    OnNavigationPropertyChanged("SysUser");
                }
            }
        }
        private TrackableCollection<SysUser> _sysUser;
    
        [DataMember]
        public TrackableCollection<SysUser_Role> SysUser_Role
        {
            get
            {
                if (_sysUser_Role == null)
                {
                    _sysUser_Role = new TrackableCollection<SysUser_Role>();
                    _sysUser_Role.CollectionChanged += FixupSysUser_Role;
                }
                return _sysUser_Role;
            }
            set
            {
                if (!ReferenceEquals(_sysUser_Role, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sysUser_Role != null)
                    {
                        _sysUser_Role.CollectionChanged -= FixupSysUser_Role;
                    }
                    _sysUser_Role = value;
                    if (_sysUser_Role != null)
                    {
                        _sysUser_Role.CollectionChanged += FixupSysUser_Role;
                    }
                    OnNavigationPropertyChanged("SysUser_Role");
                }
            }
        }
        private TrackableCollection<SysUser_Role> _sysUser_Role;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Role_Privilege.Clear();
            SysUser.Clear();
            SysUser_Role.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupRole_Privilege(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Role_Privilege item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Role_Privilege", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role_Privilege item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Role_Privilege", item);
                    }
                }
            }
        }
    
        private void FixupSysUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SysUser item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SysUser", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SysUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SysUser", item);
                    }
                }
            }
        }
    
        private void FixupSysUser_Role(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SysUser_Role item in e.NewItems)
                {
                    item.Role = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SysUser_Role", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SysUser_Role item in e.OldItems)
                {
                    if (ReferenceEquals(item.Role, this))
                    {
                        item.Role = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SysUser_Role", item);
                    }
                }
            }
        }

        #endregion
    }
}
