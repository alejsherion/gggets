//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(HAWB))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class HAWBBox: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid BoxID
        {
            get { return _boxID; }
            set
            {
                if (_boxID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BoxID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _boxID = value;
                    OnPropertyChanged("BoxID");
                }
            }
        }
        private System.Guid _boxID;
    
        [DataMember]
        public System.Guid HID
        {
            get { return _hID; }
            set
            {
                if (_hID != value)
                {
                    ChangeTracker.RecordOriginalValue("HID", _hID);
                    if (!IsDeserializing)
                    {
                        if (HAWB != null && HAWB.HID != value)
                        {
                            HAWB = null;
                        }
                    }
                    _hID = value;
                    OnPropertyChanged("HID");
                }
            }
        }
        private System.Guid _hID;
    
        [DataMember]
        public int BoxType
        {
            get { return _boxType; }
            set
            {
                if (_boxType != value)
                {
                    _boxType = value;
                    OnPropertyChanged("BoxType");
                }
            }
        }
        private int _boxType = 1;
    
        [DataMember]
        public decimal Weight
        {
            get { return _weight; }
            set
            {
                if (_weight != value)
                {
                    _weight = value;
                    OnPropertyChanged("Weight");
                }
            }
        }
        private decimal _weight = 0.0m;
    
        [DataMember]
        public Nullable<decimal> Length
        {
            get { return _length; }
            set
            {
                if (_length != value)
                {
                    _length = value;
                    OnPropertyChanged("Length");
                }
            }
        }
        private Nullable<decimal> _length = 0.0m;
    
        [DataMember]
        public Nullable<decimal> Width
        {
            get { return _width; }
            set
            {
                if (_width != value)
                {
                    _width = value;
                    OnPropertyChanged("Width");
                }
            }
        }
        private Nullable<decimal> _width = 0.0m;
    
        [DataMember]
        public Nullable<decimal> Height
        {
            get { return _height; }
            set
            {
                if (_height != value)
                {
                    _height = value;
                    OnPropertyChanged("Height");
                }
            }
        }
        private Nullable<decimal> _height = 0.0m;
    
        [DataMember]
        public Nullable<decimal> TransFee
        {
            get { return _transFee; }
            set
            {
                if (_transFee != value)
                {
                    _transFee = value;
                    OnPropertyChanged("TransFee");
                }
            }
        }
        private Nullable<decimal> _transFee;
    
        [DataMember]
        public int TransCurrency
        {
            get { return _transCurrency; }
            set
            {
                if (_transCurrency != value)
                {
                    _transCurrency = value;
                    OnPropertyChanged("TransCurrency");
                }
            }
        }
        private int _transCurrency = 0;
    
        [DataMember]
        public int Piece
        {
            get { return _piece; }
            set
            {
                if (_piece != value)
                {
                    _piece = value;
                    OnPropertyChanged("Piece");
                }
            }
        }
        private int _piece = 0;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public HAWB HAWB
        {
            get { return _hAWB; }
            set
            {
                if (!ReferenceEquals(_hAWB, value))
                {
                    var previousValue = _hAWB;
                    _hAWB = value;
                    FixupHAWB(previousValue);
                    OnNavigationPropertyChanged("HAWB");
                }
            }
        }
        private HAWB _hAWB;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            HAWB = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupHAWB(HAWB previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HAWBBox.Contains(this))
            {
                previousValue.HAWBBox.Remove(this);
            }
    
            if (HAWB != null)
            {
                if (!HAWB.HAWBBox.Contains(this))
                {
                    HAWB.HAWBBox.Add(this);
                }
    
                HID = HAWB.HID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("HAWB")
                    && (ChangeTracker.OriginalValues["HAWB"] == HAWB))
                {
                    ChangeTracker.OriginalValues.Remove("HAWB");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("HAWB", previousValue);
                }
                if (HAWB != null && !HAWB.ChangeTracker.ChangeTrackingEnabled)
                {
                    HAWB.StartTracking();
                }
            }
        }

        #endregion
    }
}
