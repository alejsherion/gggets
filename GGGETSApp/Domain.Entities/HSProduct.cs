//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(HSRelation))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class HSProduct: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid HSID
        {
            get { return _hSID; }
            set
            {
                if (_hSID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'HSID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _hSID = value;
                    OnPropertyChanged("HSID");
                }
            }
        }
        private System.Guid _hSID;
    
        [DataMember]
        public string HSCode
        {
            get { return _hSCode; }
            set
            {
                if (_hSCode != value)
                {
                    _hSCode = value;
                    OnPropertyChanged("HSCode");
                }
            }
        }
        private string _hSCode;
    
        [DataMember]
        public string HSName
        {
            get { return _hSName; }
            set
            {
                if (_hSName != value)
                {
                    _hSName = value;
                    OnPropertyChanged("HSName");
                }
            }
        }
        private string _hSName;
    
        [DataMember]
        public decimal DiscountTax
        {
            get { return _discountTax; }
            set
            {
                if (_discountTax != value)
                {
                    _discountTax = value;
                    OnPropertyChanged("DiscountTax");
                }
            }
        }
        private decimal _discountTax;
    
        [DataMember]
        public decimal GeneralTax
        {
            get { return _generalTax; }
            set
            {
                if (_generalTax != value)
                {
                    _generalTax = value;
                    OnPropertyChanged("GeneralTax");
                }
            }
        }
        private decimal _generalTax;
    
        [DataMember]
        public Nullable<decimal> ExportTax
        {
            get { return _exportTax; }
            set
            {
                if (_exportTax != value)
                {
                    _exportTax = value;
                    OnPropertyChanged("ExportTax");
                }
            }
        }
        private Nullable<decimal> _exportTax;
    
        [DataMember]
        public Nullable<decimal> ConsumeTax
        {
            get { return _consumeTax; }
            set
            {
                if (_consumeTax != value)
                {
                    _consumeTax = value;
                    OnPropertyChanged("ConsumeTax");
                }
            }
        }
        private Nullable<decimal> _consumeTax;
    
        [DataMember]
        public decimal RiseTax
        {
            get { return _riseTax; }
            set
            {
                if (_riseTax != value)
                {
                    _riseTax = value;
                    OnPropertyChanged("RiseTax");
                }
            }
        }
        private decimal _riseTax;
    
        [DataMember]
        public string CertificateSign
        {
            get { return _certificateSign; }
            set
            {
                if (_certificateSign != value)
                {
                    _certificateSign = value;
                    OnPropertyChanged("CertificateSign");
                }
            }
        }
        private string _certificateSign;
    
        [DataMember]
        public string PricingSign
        {
            get { return _pricingSign; }
            set
            {
                if (_pricingSign != value)
                {
                    _pricingSign = value;
                    OnPropertyChanged("PricingSign");
                }
            }
        }
        private string _pricingSign;
    
        [DataMember]
        public string TaxDemandSign
        {
            get { return _taxDemandSign; }
            set
            {
                if (_taxDemandSign != value)
                {
                    _taxDemandSign = value;
                    OnPropertyChanged("TaxDemandSign");
                }
            }
        }
        private string _taxDemandSign;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<HSRelation> HSRelations
        {
            get
            {
                if (_hSRelations == null)
                {
                    _hSRelations = new TrackableCollection<HSRelation>();
                    _hSRelations.CollectionChanged += FixupHSRelations;
                }
                return _hSRelations;
            }
            set
            {
                if (!ReferenceEquals(_hSRelations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hSRelations != null)
                    {
                        _hSRelations.CollectionChanged -= FixupHSRelations;
                    }
                    _hSRelations = value;
                    if (_hSRelations != null)
                    {
                        _hSRelations.CollectionChanged += FixupHSRelations;
                    }
                    OnNavigationPropertyChanged("HSRelations");
                }
            }
        }
        private TrackableCollection<HSRelation> _hSRelations;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            HSRelations.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupHSRelations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HSRelation item in e.NewItems)
                {
                    item.HSProduct = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HSRelations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HSRelation item in e.OldItems)
                {
                    if (ReferenceEquals(item.HSProduct, this))
                    {
                        item.HSProduct = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HSRelations", item);
                    }
                }
            }
        }

        #endregion
    }
}
