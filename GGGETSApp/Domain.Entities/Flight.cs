//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MAWB))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Flight: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid FID
        {
            get { return _fID; }
            set
            {
                if (_fID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fID = value;
                    OnPropertyChanged("FID");
                }
            }
        }
        private System.Guid _fID;
    
        [DataMember]
        public Nullable<System.Guid> MID
        {
            get { return _mID; }
            set
            {
                if (_mID != value)
                {
                    ChangeTracker.RecordOriginalValue("MID", _mID);
                    if (!IsDeserializing)
                    {
                        if (MAWBs != null && MAWBs.MID != value)
                        {
                            MAWBs = null;
                        }
                    }
                    _mID = value;
                    OnPropertyChanged("MID");
                }
            }
        }
        private Nullable<System.Guid> _mID;
    
        [DataMember]
        public string FlightNo
        {
            get { return _flightNo; }
            set
            {
                if (_flightNo != value)
                {
                    _flightNo = value;
                    OnPropertyChanged("FlightNo");
                }
            }
        }
        private string _flightNo;
    
        [DataMember]
        public string From
        {
            get { return _from; }
            set
            {
                if (_from != value)
                {
                    _from = value;
                    OnPropertyChanged("From");
                }
            }
        }
        private string _from;
    
        [DataMember]
        public string To
        {
            get { return _to; }
            set
            {
                if (_to != value)
                {
                    _to = value;
                    OnPropertyChanged("To");
                }
            }
        }
        private string _to;
    
        [DataMember]
        public Nullable<System.DateTime> TakeOffTime
        {
            get { return _takeOffTime; }
            set
            {
                if (_takeOffTime != value)
                {
                    _takeOffTime = value;
                    OnPropertyChanged("TakeOffTime");
                }
            }
        }
        private Nullable<System.DateTime> _takeOffTime;
    
        [DataMember]
        public Nullable<System.DateTime> LandTime
        {
            get { return _landTime; }
            set
            {
                if (_landTime != value)
                {
                    _landTime = value;
                    OnPropertyChanged("LandTime");
                }
            }
        }
        private Nullable<System.DateTime> _landTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public MAWB MAWBs
        {
            get { return _mAWBs; }
            set
            {
                if (!ReferenceEquals(_mAWBs, value))
                {
                    var previousValue = _mAWBs;
                    _mAWBs = value;
                    FixupMAWBs(previousValue);
                    OnNavigationPropertyChanged("MAWBs");
                }
            }
        }
        private MAWB _mAWBs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MAWBs = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMAWBs(MAWB previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Flight.Contains(this))
            {
                previousValue.Flight.Remove(this);
            }
    
            if (MAWBs != null)
            {
                if (!MAWBs.Flight.Contains(this))
                {
                    MAWBs.Flight.Add(this);
                }
    
                MID = MAWBs.MID;
            }
            else if (!skipKeys)
            {
                MID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MAWBs")
                    && (ChangeTracker.OriginalValues["MAWBs"] == MAWBs))
                {
                    ChangeTracker.OriginalValues.Remove("MAWBs");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MAWBs", previousValue);
                }
                if (MAWBs != null && !MAWBs.ChangeTracker.ChangeTrackingEnabled)
                {
                    MAWBs.StartTracking();
                }
            }
        }

        #endregion
    }
}
