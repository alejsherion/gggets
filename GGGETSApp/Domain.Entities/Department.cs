//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using ETS.GGGETSApp.Domain.Core.Entities;

namespace ETS.GGGETSApp.Domain.Application.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Company))]
    [KnownType(typeof(User))]
    [Serializable]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Department: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid DID
        {
            get { return _dID; }
            set
            {
                if (_dID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dID = value;
                    OnPropertyChanged("DID");
                }
            }
        }
        private System.Guid _dID;
    
        [DataMember]
        public Nullable<System.Guid> CID
        {
            get { return _cID; }
            set
            {
                if (_cID != value)
                {
                    ChangeTracker.RecordOriginalValue("CID", _cID);
                    if (!IsDeserializing)
                    {
                        if (Company != null && Company.CID != value)
                        {
                            Company = null;
                        }
                    }
                    _cID = value;
                    OnPropertyChanged("CID");
                }
            }
        }
        private Nullable<System.Guid> _cID;
    
        [DataMember]
        public string DepName
        {
            get { return _depName; }
            set
            {
                if (_depName != value)
                {
                    _depName = value;
                    OnPropertyChanged("DepName");
                }
            }
        }
        private string _depName;
    
        [DataMember]
        public int FeeDiscountType
        {
            get { return _feeDiscountType; }
            set
            {
                if (_feeDiscountType != value)
                {
                    _feeDiscountType = value;
                    OnPropertyChanged("FeeDiscountType");
                }
            }
        }
        private int _feeDiscountType;
    
        [DataMember]
        public decimal FeeDiscountRate
        {
            get { return _feeDiscountRate; }
            set
            {
                if (_feeDiscountRate != value)
                {
                    _feeDiscountRate = value;
                    OnPropertyChanged("FeeDiscountRate");
                }
            }
        }
        private decimal _feeDiscountRate;
    
        [DataMember]
        public int WeightDiscountType
        {
            get { return _weightDiscountType; }
            set
            {
                if (_weightDiscountType != value)
                {
                    _weightDiscountType = value;
                    OnPropertyChanged("WeightDiscountType");
                }
            }
        }
        private int _weightDiscountType;
    
        [DataMember]
        public decimal WeightDiscountRate
        {
            get { return _weightDiscountRate; }
            set
            {
                if (_weightDiscountRate != value)
                {
                    _weightDiscountRate = value;
                    OnPropertyChanged("WeightDiscountRate");
                }
            }
        }
        private decimal _weightDiscountRate;
    
        [DataMember]
        public int SettleType
        {
            get { return _settleType; }
            set
            {
                if (_settleType != value)
                {
                    _settleType = value;
                    OnPropertyChanged("SettleType");
                }
            }
        }
        private int _settleType;
    
        [DataMember]
        public int WeightCalType
        {
            get { return _weightCalType; }
            set
            {
                if (_weightCalType != value)
                {
                    _weightCalType = value;
                    OnPropertyChanged("WeightCalType");
                }
            }
        }
        private int _weightCalType;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Company Company
        {
            get { return _company; }
            set
            {
                if (!ReferenceEquals(_company, value))
                {
                    var previousValue = _company;
                    _company = value;
                    FixupCompany(previousValue);
                    OnNavigationPropertyChanged("Company");
                }
            }
        }
        private Company _company;
    
        [DataMember]
        public TrackableCollection<User> User
        {
            get
            {
                if (_user == null)
                {
                    _user = new TrackableCollection<User>();
                    _user.CollectionChanged += FixupUser;
                }
                return _user;
            }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_user != null)
                    {
                        _user.CollectionChanged -= FixupUser;
                    }
                    _user = value;
                    if (_user != null)
                    {
                        _user.CollectionChanged += FixupUser;
                    }
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private TrackableCollection<User> _user;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Company = null;
            User.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCompany(Company previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Department.Contains(this))
            {
                previousValue.Department.Remove(this);
            }
    
            if (Company != null)
            {
                if (!Company.Department.Contains(this))
                {
                    Company.Department.Add(this);
                }
    
                CID = Company.CID;
            }
            else if (!skipKeys)
            {
                CID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Company")
                    && (ChangeTracker.OriginalValues["Company"] == Company))
                {
                    ChangeTracker.OriginalValues.Remove("Company");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Company", previousValue);
                }
                if (Company != null && !Company.ChangeTracker.ChangeTrackingEnabled)
                {
                    Company.StartTracking();
                }
            }
        }
    
        private void FixupUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Department1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("User", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Department1, this))
                    {
                        item.Department1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("User", item);
                    }
                }
            }
        }

        #endregion
    }
}
